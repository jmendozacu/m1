<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;
/**
 * InventoryAdjustment Class Doc Comment
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://squareup.com/developers
 */
class InventoryAdjustment implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'id' => 'string',
        'reference_id' => 'string',
        'from_status' => 'string',
        'to_status' => 'string',
        'from_location_id' => 'string',
        'to_location_id' => 'string',
        'catalog_object_id' => 'string',
        'catalog_object_type' => 'string',
        'quantity' => 'string',
        'total_cost_money' => '\SquareConnect\Model\Money',
        'total_price_money' => '\SquareConnect\Model\Money',
        'occurred_at' => 'string',
        'created_at' => 'string',
        'source' => '\SquareConnect\Model\SourceApplication',
        'employee_id' => 'string',
        'transaction_id' => 'string',
        'refund_id' => 'string',
        'purchase_order_id' => 'string',
        'goods_receipt_id' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'id' => 'id',
        'reference_id' => 'reference_id',
        'from_status' => 'from_status',
        'to_status' => 'to_status',
        'from_location_id' => 'from_location_id',
        'to_location_id' => 'to_location_id',
        'catalog_object_id' => 'catalog_object_id',
        'catalog_object_type' => 'catalog_object_type',
        'quantity' => 'quantity',
        'total_cost_money' => 'total_cost_money',
        'total_price_money' => 'total_price_money',
        'occurred_at' => 'occurred_at',
        'created_at' => 'created_at',
        'source' => 'source',
        'employee_id' => 'employee_id',
        'transaction_id' => 'transaction_id',
        'refund_id' => 'refund_id',
        'purchase_order_id' => 'purchase_order_id',
        'goods_receipt_id' => 'goods_receipt_id'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'id' => 'setId',
        'reference_id' => 'setReferenceId',
        'from_status' => 'setFromStatus',
        'to_status' => 'setToStatus',
        'from_location_id' => 'setFromLocationId',
        'to_location_id' => 'setToLocationId',
        'catalog_object_id' => 'setCatalogObjectId',
        'catalog_object_type' => 'setCatalogObjectType',
        'quantity' => 'setQuantity',
        'total_cost_money' => 'setTotalCostMoney',
        'total_price_money' => 'setTotalPriceMoney',
        'occurred_at' => 'setOccurredAt',
        'created_at' => 'setCreatedAt',
        'source' => 'setSource',
        'employee_id' => 'setEmployeeId',
        'transaction_id' => 'setTransactionId',
        'refund_id' => 'setRefundId',
        'purchase_order_id' => 'setPurchaseOrderId',
        'goods_receipt_id' => 'setGoodsReceiptId'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'id' => 'getId',
        'reference_id' => 'getReferenceId',
        'from_status' => 'getFromStatus',
        'to_status' => 'getToStatus',
        'from_location_id' => 'getFromLocationId',
        'to_location_id' => 'getToLocationId',
        'catalog_object_id' => 'getCatalogObjectId',
        'catalog_object_type' => 'getCatalogObjectType',
        'quantity' => 'getQuantity',
        'total_cost_money' => 'getTotalCostMoney',
        'total_price_money' => 'getTotalPriceMoney',
        'occurred_at' => 'getOccurredAt',
        'created_at' => 'getCreatedAt',
        'source' => 'getSource',
        'employee_id' => 'getEmployeeId',
        'transaction_id' => 'getTransactionId',
        'refund_id' => 'getRefundId',
        'purchase_order_id' => 'getPurchaseOrderId',
        'goods_receipt_id' => 'getGoodsReceiptId'
    );
  
    /**
      * $id The unique ID generated by Square's servers for this [InventoryAdjustment](#type-inventoryadjustment).
      * @var string
      */
    protected $id;
    /**
      * $reference_id An optional id to tie this [InventoryAdjustment](#type-inventoryadjustment) to an external system.
      * @var string
      */
    protected $reference_id;
    /**
      * $from_status The [InventoryStatus](#type-inventorystatus) of the objects prior to this adjustment.
      * @var string
      */
    protected $from_status;
    /**
      * $to_status The [InventoryStatus](#type-inventorystatus) of the objects following this adjustment.
      * @var string
      */
    protected $to_status;
    /**
      * $from_location_id The id of the [Location](#type-location) of the objects prior to this adjustment.
      * @var string
      */
    protected $from_location_id;
    /**
      * $to_location_id The id of the [Location](#type-location) of the objects following this adjustment.
      * @var string
      */
    protected $to_location_id;
    /**
      * $catalog_object_id The id of the [CatalogObject](#type-catalogobject) being tracked.
      * @var string
      */
    protected $catalog_object_id;
    /**
      * $catalog_object_type The type of the object being tracked generated by Square's servers, e.g., `\"ITEM_VARIATION\"`.
      * @var string
      */
    protected $catalog_object_type;
    /**
      * $quantity The quantity of the objects in this adjustment line as a decimal string. Fractional quantities are not currently supported. The database will truncate fractional values smaller than 1/100,000 when fractional values are supported.
      * @var string
      */
    protected $quantity;
    /**
      * $total_cost_money The total cost of the goods in this adjustment. Must be non-negative.
      * @var \SquareConnect\Model\Money
      */
    protected $total_cost_money;
    /**
      * $total_price_money Read-only total price paid for the goods in this adjustment. Present if and only if the `to_status` is `SOLD`. Always non-negative.
      * @var \SquareConnect\Model\Money
      */
    protected $total_price_money;
    /**
      * $occurred_at User-settable RFC 3339 timestamp when the adjustment occurred. On writes, cannot be older than 24 hours or in the future.
      * @var string
      */
    protected $occurred_at;
    /**
      * $created_at Read-only RFC 3339 timestamp when the server received the adjustment. Ignored on write.
      * @var string
      */
    protected $created_at;
    /**
      * $source Read-only description of the software application that created the adjustment. Ignored on write.
      * @var \SquareConnect\Model\SourceApplication
      */
    protected $source;
    /**
      * $employee_id Id of the [Employee](https://docs.connect.squareup.com/api/connect/v1#datatype-employee) who made the adjustment.
      * @var string
      */
    protected $employee_id;
    /**
      * $transaction_id Read-only id of the Square [Transaction][#type-transaction] that caused this adjustment to take place, if any.
      * @var string
      */
    protected $transaction_id;
    /**
      * $refund_id Read-only id of the Square [Refund][#type-refund] that caused this adjustment to take place, if any.
      * @var string
      */
    protected $refund_id;
    /**
      * $purchase_order_id Read-only id of the Square Purchase Order that caused this adjustment to take place, if any.
      * @var string
      */
    protected $purchase_order_id;
    /**
      * $goods_receipt_id Read-only id of the Square Goods Receipt that caused this adjustment to take place, if any.
      * @var string
      */
    protected $goods_receipt_id;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initializing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            if (isset($data["id"])) {
              $this->id = $data["id"];
            } else {
              $this->id = null;
            }
            if (isset($data["reference_id"])) {
              $this->reference_id = $data["reference_id"];
            } else {
              $this->reference_id = null;
            }
            if (isset($data["from_status"])) {
              $this->from_status = $data["from_status"];
            } else {
              $this->from_status = null;
            }
            if (isset($data["to_status"])) {
              $this->to_status = $data["to_status"];
            } else {
              $this->to_status = null;
            }
            if (isset($data["from_location_id"])) {
              $this->from_location_id = $data["from_location_id"];
            } else {
              $this->from_location_id = null;
            }
            if (isset($data["to_location_id"])) {
              $this->to_location_id = $data["to_location_id"];
            } else {
              $this->to_location_id = null;
            }
            if (isset($data["catalog_object_id"])) {
              $this->catalog_object_id = $data["catalog_object_id"];
            } else {
              $this->catalog_object_id = null;
            }
            if (isset($data["catalog_object_type"])) {
              $this->catalog_object_type = $data["catalog_object_type"];
            } else {
              $this->catalog_object_type = null;
            }
            if (isset($data["quantity"])) {
              $this->quantity = $data["quantity"];
            } else {
              $this->quantity = null;
            }
            if (isset($data["total_cost_money"])) {
              $this->total_cost_money = $data["total_cost_money"];
            } else {
              $this->total_cost_money = null;
            }
            if (isset($data["total_price_money"])) {
              $this->total_price_money = $data["total_price_money"];
            } else {
              $this->total_price_money = null;
            }
            if (isset($data["occurred_at"])) {
              $this->occurred_at = $data["occurred_at"];
            } else {
              $this->occurred_at = null;
            }
            if (isset($data["created_at"])) {
              $this->created_at = $data["created_at"];
            } else {
              $this->created_at = null;
            }
            if (isset($data["source"])) {
              $this->source = $data["source"];
            } else {
              $this->source = null;
            }
            if (isset($data["employee_id"])) {
              $this->employee_id = $data["employee_id"];
            } else {
              $this->employee_id = null;
            }
            if (isset($data["transaction_id"])) {
              $this->transaction_id = $data["transaction_id"];
            } else {
              $this->transaction_id = null;
            }
            if (isset($data["refund_id"])) {
              $this->refund_id = $data["refund_id"];
            } else {
              $this->refund_id = null;
            }
            if (isset($data["purchase_order_id"])) {
              $this->purchase_order_id = $data["purchase_order_id"];
            } else {
              $this->purchase_order_id = null;
            }
            if (isset($data["goods_receipt_id"])) {
              $this->goods_receipt_id = $data["goods_receipt_id"];
            } else {
              $this->goods_receipt_id = null;
            }
        }
    }
    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param string $id The unique ID generated by Square's servers for this [InventoryAdjustment](#type-inventoryadjustment).
     * @return $this
     */
    public function setId($id)
    {
        $this->id = $id;
        return $this;
    }
    /**
     * Gets reference_id
     * @return string
     */
    public function getReferenceId()
    {
        return $this->reference_id;
    }
  
    /**
     * Sets reference_id
     * @param string $reference_id An optional id to tie this [InventoryAdjustment](#type-inventoryadjustment) to an external system.
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->reference_id = $reference_id;
        return $this;
    }
    /**
     * Gets from_status
     * @return string
     */
    public function getFromStatus()
    {
        return $this->from_status;
    }
  
    /**
     * Sets from_status
     * @param string $from_status The [InventoryStatus](#type-inventorystatus) of the objects prior to this adjustment.
     * @return $this
     */
    public function setFromStatus($from_status)
    {
        $this->from_status = $from_status;
        return $this;
    }
    /**
     * Gets to_status
     * @return string
     */
    public function getToStatus()
    {
        return $this->to_status;
    }
  
    /**
     * Sets to_status
     * @param string $to_status The [InventoryStatus](#type-inventorystatus) of the objects following this adjustment.
     * @return $this
     */
    public function setToStatus($to_status)
    {
        $this->to_status = $to_status;
        return $this;
    }
    /**
     * Gets from_location_id
     * @return string
     */
    public function getFromLocationId()
    {
        return $this->from_location_id;
    }
  
    /**
     * Sets from_location_id
     * @param string $from_location_id The id of the [Location](#type-location) of the objects prior to this adjustment.
     * @return $this
     */
    public function setFromLocationId($from_location_id)
    {
        $this->from_location_id = $from_location_id;
        return $this;
    }
    /**
     * Gets to_location_id
     * @return string
     */
    public function getToLocationId()
    {
        return $this->to_location_id;
    }
  
    /**
     * Sets to_location_id
     * @param string $to_location_id The id of the [Location](#type-location) of the objects following this adjustment.
     * @return $this
     */
    public function setToLocationId($to_location_id)
    {
        $this->to_location_id = $to_location_id;
        return $this;
    }
    /**
     * Gets catalog_object_id
     * @return string
     */
    public function getCatalogObjectId()
    {
        return $this->catalog_object_id;
    }
  
    /**
     * Sets catalog_object_id
     * @param string $catalog_object_id The id of the [CatalogObject](#type-catalogobject) being tracked.
     * @return $this
     */
    public function setCatalogObjectId($catalog_object_id)
    {
        $this->catalog_object_id = $catalog_object_id;
        return $this;
    }
    /**
     * Gets catalog_object_type
     * @return string
     */
    public function getCatalogObjectType()
    {
        return $this->catalog_object_type;
    }
  
    /**
     * Sets catalog_object_type
     * @param string $catalog_object_type The type of the object being tracked generated by Square's servers, e.g., `\"ITEM_VARIATION\"`.
     * @return $this
     */
    public function setCatalogObjectType($catalog_object_type)
    {
        $this->catalog_object_type = $catalog_object_type;
        return $this;
    }
    /**
     * Gets quantity
     * @return string
     */
    public function getQuantity()
    {
        return $this->quantity;
    }
  
    /**
     * Sets quantity
     * @param string $quantity The quantity of the objects in this adjustment line as a decimal string. Fractional quantities are not currently supported. The database will truncate fractional values smaller than 1/100,000 when fractional values are supported.
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->quantity = $quantity;
        return $this;
    }
    /**
     * Gets total_cost_money
     * @return \SquareConnect\Model\Money
     */
    public function getTotalCostMoney()
    {
        return $this->total_cost_money;
    }
  
    /**
     * Sets total_cost_money
     * @param \SquareConnect\Model\Money $total_cost_money The total cost of the goods in this adjustment. Must be non-negative.
     * @return $this
     */
    public function setTotalCostMoney($total_cost_money)
    {
        $this->total_cost_money = $total_cost_money;
        return $this;
    }
    /**
     * Gets total_price_money
     * @return \SquareConnect\Model\Money
     */
    public function getTotalPriceMoney()
    {
        return $this->total_price_money;
    }
  
    /**
     * Sets total_price_money
     * @param \SquareConnect\Model\Money $total_price_money Read-only total price paid for the goods in this adjustment. Present if and only if the `to_status` is `SOLD`. Always non-negative.
     * @return $this
     */
    public function setTotalPriceMoney($total_price_money)
    {
        $this->total_price_money = $total_price_money;
        return $this;
    }
    /**
     * Gets occurred_at
     * @return string
     */
    public function getOccurredAt()
    {
        return $this->occurred_at;
    }
  
    /**
     * Sets occurred_at
     * @param string $occurred_at User-settable RFC 3339 timestamp when the adjustment occurred. On writes, cannot be older than 24 hours or in the future.
     * @return $this
     */
    public function setOccurredAt($occurred_at)
    {
        $this->occurred_at = $occurred_at;
        return $this;
    }
    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->created_at;
    }
  
    /**
     * Sets created_at
     * @param string $created_at Read-only RFC 3339 timestamp when the server received the adjustment. Ignored on write.
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->created_at = $created_at;
        return $this;
    }
    /**
     * Gets source
     * @return \SquareConnect\Model\SourceApplication
     */
    public function getSource()
    {
        return $this->source;
    }
  
    /**
     * Sets source
     * @param \SquareConnect\Model\SourceApplication $source Read-only description of the software application that created the adjustment. Ignored on write.
     * @return $this
     */
    public function setSource($source)
    {
        $this->source = $source;
        return $this;
    }
    /**
     * Gets employee_id
     * @return string
     */
    public function getEmployeeId()
    {
        return $this->employee_id;
    }
  
    /**
     * Sets employee_id
     * @param string $employee_id Id of the [Employee](https://docs.connect.squareup.com/api/connect/v1#datatype-employee) who made the adjustment.
     * @return $this
     */
    public function setEmployeeId($employee_id)
    {
        $this->employee_id = $employee_id;
        return $this;
    }
    /**
     * Gets transaction_id
     * @return string
     */
    public function getTransactionId()
    {
        return $this->transaction_id;
    }
  
    /**
     * Sets transaction_id
     * @param string $transaction_id Read-only id of the Square [Transaction][#type-transaction] that caused this adjustment to take place, if any.
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->transaction_id = $transaction_id;
        return $this;
    }
    /**
     * Gets refund_id
     * @return string
     */
    public function getRefundId()
    {
        return $this->refund_id;
    }
  
    /**
     * Sets refund_id
     * @param string $refund_id Read-only id of the Square [Refund][#type-refund] that caused this adjustment to take place, if any.
     * @return $this
     */
    public function setRefundId($refund_id)
    {
        $this->refund_id = $refund_id;
        return $this;
    }
    /**
     * Gets purchase_order_id
     * @return string
     */
    public function getPurchaseOrderId()
    {
        return $this->purchase_order_id;
    }
  
    /**
     * Sets purchase_order_id
     * @param string $purchase_order_id Read-only id of the Square Purchase Order that caused this adjustment to take place, if any.
     * @return $this
     */
    public function setPurchaseOrderId($purchase_order_id)
    {
        $this->purchase_order_id = $purchase_order_id;
        return $this;
    }
    /**
     * Gets goods_receipt_id
     * @return string
     */
    public function getGoodsReceiptId()
    {
        return $this->goods_receipt_id;
    }
  
    /**
     * Sets goods_receipt_id
     * @param string $goods_receipt_id Read-only id of the Square Goods Receipt that caused this adjustment to take place, if any.
     * @return $this
     */
    public function setGoodsReceiptId($goods_receipt_id)
    {
        $this->goods_receipt_id = $goods_receipt_id;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
