<?php
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;
/**
 * BatchRetrieveInventoryChangesRequest Class Doc Comment
 *
 * @category Class
 * @package  SquareConnect
 * @author   Square Inc.
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://squareup.com/developers
 */
class BatchRetrieveInventoryChangesRequest implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'catalog_object_ids' => 'string[]',
        'location_ids' => 'string[]',
        'types' => 'string[]',
        'statuses' => 'string[]',
        'updated_after' => 'string',
        'updated_before' => 'string',
        'cursor' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'catalog_object_ids' => 'catalog_object_ids',
        'location_ids' => 'location_ids',
        'types' => 'types',
        'statuses' => 'statuses',
        'updated_after' => 'updated_after',
        'updated_before' => 'updated_before',
        'cursor' => 'cursor'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'catalog_object_ids' => 'setCatalogObjectIds',
        'location_ids' => 'setLocationIds',
        'types' => 'setTypes',
        'statuses' => 'setStatuses',
        'updated_after' => 'setUpdatedAfter',
        'updated_before' => 'setUpdatedBefore',
        'cursor' => 'setCursor'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'catalog_object_ids' => 'getCatalogObjectIds',
        'location_ids' => 'getLocationIds',
        'types' => 'getTypes',
        'statuses' => 'getStatuses',
        'updated_after' => 'getUpdatedAfter',
        'updated_before' => 'getUpdatedBefore',
        'cursor' => 'getCursor'
    );
  
    /**
      * $catalog_object_ids The set of [CatalogObject](#type-catalogobject) ids to look up. If omitted or blank, all objects matching the other filters will be included in the results.
      * @var string[]
      */
    protected $catalog_object_ids;
    /**
      * $location_ids A list of [Location](#type-location) ids to query. If omitted or empty, defaults to all locations.
      * @var string[]
      */
    protected $location_ids;
    /**
      * $types A list of [InventoryChangeType](#type-inventorychangetype)s to query. If omitted or empty, defaults to all types.
      * @var string[]
      */
    protected $types;
    /**
      * $statuses A list of [InventoryStatus](#type-inventorystatus) values. If omitted or empty, defaults to all statuses.
      * @var string[]
      */
    protected $statuses;
    /**
      * $updated_after An RFC 3339 timestamp. Only changes whose `created_at`/`calculated_at` timestamp is later than the given time will be returned. If not specified, defaults to the epoch.
      * @var string
      */
    protected $updated_after;
    /**
      * $updated_before An RFC 3339 timestamp. Only changes whose `created_at`/`calculated_at` timestamp is earlier than the given time will be returned. If not specified, defaults to now.
      * @var string
      */
    protected $updated_before;
    /**
      * $cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
      * @var string
      */
    protected $cursor;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initializing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            if (isset($data["catalog_object_ids"])) {
              $this->catalog_object_ids = $data["catalog_object_ids"];
            } else {
              $this->catalog_object_ids = null;
            }
            if (isset($data["location_ids"])) {
              $this->location_ids = $data["location_ids"];
            } else {
              $this->location_ids = null;
            }
            if (isset($data["types"])) {
              $this->types = $data["types"];
            } else {
              $this->types = null;
            }
            if (isset($data["statuses"])) {
              $this->statuses = $data["statuses"];
            } else {
              $this->statuses = null;
            }
            if (isset($data["updated_after"])) {
              $this->updated_after = $data["updated_after"];
            } else {
              $this->updated_after = null;
            }
            if (isset($data["updated_before"])) {
              $this->updated_before = $data["updated_before"];
            } else {
              $this->updated_before = null;
            }
            if (isset($data["cursor"])) {
              $this->cursor = $data["cursor"];
            } else {
              $this->cursor = null;
            }
        }
    }
    /**
     * Gets catalog_object_ids
     * @return string[]
     */
    public function getCatalogObjectIds()
    {
        return $this->catalog_object_ids;
    }
  
    /**
     * Sets catalog_object_ids
     * @param string[] $catalog_object_ids The set of [CatalogObject](#type-catalogobject) ids to look up. If omitted or blank, all objects matching the other filters will be included in the results.
     * @return $this
     */
    public function setCatalogObjectIds($catalog_object_ids)
    {
        $this->catalog_object_ids = $catalog_object_ids;
        return $this;
    }
    /**
     * Gets location_ids
     * @return string[]
     */
    public function getLocationIds()
    {
        return $this->location_ids;
    }
  
    /**
     * Sets location_ids
     * @param string[] $location_ids A list of [Location](#type-location) ids to query. If omitted or empty, defaults to all locations.
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->location_ids = $location_ids;
        return $this;
    }
    /**
     * Gets types
     * @return string[]
     */
    public function getTypes()
    {
        return $this->types;
    }
  
    /**
     * Sets types
     * @param string[] $types A list of [InventoryChangeType](#type-inventorychangetype)s to query. If omitted or empty, defaults to all types.
     * @return $this
     */
    public function setTypes($types)
    {
        $this->types = $types;
        return $this;
    }
    /**
     * Gets statuses
     * @return string[]
     */
    public function getStatuses()
    {
        return $this->statuses;
    }
  
    /**
     * Sets statuses
     * @param string[] $statuses A list of [InventoryStatus](#type-inventorystatus) values. If omitted or empty, defaults to all statuses.
     * @return $this
     */
    public function setStatuses($statuses)
    {
        $this->statuses = $statuses;
        return $this;
    }
    /**
     * Gets updated_after
     * @return string
     */
    public function getUpdatedAfter()
    {
        return $this->updated_after;
    }
  
    /**
     * Sets updated_after
     * @param string $updated_after An RFC 3339 timestamp. Only changes whose `created_at`/`calculated_at` timestamp is later than the given time will be returned. If not specified, defaults to the epoch.
     * @return $this
     */
    public function setUpdatedAfter($updated_after)
    {
        $this->updated_after = $updated_after;
        return $this;
    }
    /**
     * Gets updated_before
     * @return string
     */
    public function getUpdatedBefore()
    {
        return $this->updated_before;
    }
  
    /**
     * Sets updated_before
     * @param string $updated_before An RFC 3339 timestamp. Only changes whose `created_at`/`calculated_at` timestamp is earlier than the given time will be returned. If not specified, defaults to now.
     * @return $this
     */
    public function setUpdatedBefore($updated_before)
    {
        $this->updated_before = $updated_before;
        return $this;
    }
    /**
     * Gets cursor
     * @return string
     */
    public function getCursor()
    {
        return $this->cursor;
    }
  
    /**
     * Sets cursor
     * @param string $cursor A pagination cursor returned by a previous call to this endpoint. Provide this to retrieve the next set of results for your original query.  See [Paginating results](#paginatingresults) for more information.
     * @return $this
     */
    public function setCursor($cursor)
    {
        $this->cursor = $cursor;
        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
